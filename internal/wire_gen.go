// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/go-playground/validator/v10"
	"golang.org/x/oauth2"
	"gorm.io/gorm"
	"money-tracker/internal/auth"
	"money-tracker/internal/category"
	"money-tracker/internal/category/subcategory"
	"money-tracker/internal/middleware"
	"money-tracker/internal/refresh_token"
	"money-tracker/internal/router"
	"money-tracker/internal/transaction"
	"money-tracker/internal/user"
)

// Injectors from wire.go:

func InitializeServer(db *gorm.DB, validator2 *validator.Validate, googleConfig *oauth2.Config) *router.HTTP {
	refreshTokenRepository := refreshtoken.NewRefreshTokenRepository(db)
	refreshTokenService := refreshtoken.NewRefreshTokenService(refreshTokenRepository)
	authService := auth.NewAuthService(googleConfig, refreshTokenService)
	userRepository := user.NewUserRepository(db)
	userService := user.NewUserService(userRepository)
	authHandler := auth.NewAuthHandler(googleConfig, authService, validator2, userService, refreshTokenService)
	categoryRepository := category.NewCategoryRepository(db)
	categoryService := category.NewCategoryService(categoryRepository)
	subcategoryRepository := subcategory.NewSubcategoryRepository(db)
	subcategoryService := subcategory.NewSubcategoryService(subcategoryRepository)
	categoryHandler := category.NewCategoryHandler(categoryService, subcategoryService, validator2)
	transactionRepository := transaction.NewTransactionRepository(db)
	transactionService := transaction.NewTransactionService(transactionRepository)
	transactionHandler := transaction.NewTransactionHandler(transactionService, validator2)
	authMiddleware := middleware.NewAuthMiddleware()
	http := router.NewHTTP(authHandler, categoryHandler, transactionHandler, authMiddleware)
	return http
}
